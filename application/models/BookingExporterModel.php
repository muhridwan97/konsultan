<?php

use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Style\Alignment;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;

defined('BASEPATH') or exit('No direct script access allowed');

/**
 * Class BookingModel
 * @property BookingModel $booking
 */
class BookingExporterModel extends MY_Model
{
    public function getBookingGoods($bookingId)
    {
        return $this->db
            ->select([
                'bookings.no_booking',
                'bookings.no_reference',
                'IFNULL(ref_containers.no_container, ref_ex_containers.no_container) AS no_container',
                'IFNULL(ref_containers.type, ref_ex_containers.type) AS container_type',
                'IFNULL(ref_containers.size, ref_ex_containers.size) AS container_size',
                'booking_containers.seal',
                'booking_containers.is_empty',
                'booking_containers.is_hold AS container_is_hold',
                'booking_containers.status AS container_status',
                'booking_containers.status_danger AS container_status_danger',
                'booking_containers.description AS container_description',
                'ref_goods.name AS goods_name',
                'ref_goods.whey_number',
                'ref_goods.no_goods',
                'booking_goods.quantity',
                'ref_units.unit',
                'booking_goods.unit_weight',
                '(booking_goods.quantity * booking_goods.unit_weight) AS total_weight',
                'booking_goods.unit_gross_weight',
                '(booking_goods.quantity * booking_goods.unit_gross_weight) AS total_weight',
                'booking_goods.unit_length',
                'booking_goods.unit_width',
                'booking_goods.unit_height',
                'booking_goods.unit_volume',
                '(booking_goods.quantity * ref_goods.unit_volume) AS total_volume',
                'booking_goods.is_hold AS goods_is_hold',
                'booking_goods.status AS goods_status',
                'booking_goods.status_danger AS goods_status_danger',
                'booking_goods.description AS goods_description',
            ])
            ->from('bookings')
            ->join('booking_goods', 'booking_goods.id_booking = bookings.id')
            ->join('booking_containers', 'booking_containers.id = booking_goods.id_booking_container', 'left')
            ->join('ref_containers', 'ref_containers.id = booking_containers.id_container', 'left')
            ->join('ref_containers AS ref_ex_containers', 'ref_ex_containers.no_container = booking_goods.ex_no_container', 'left')
            ->join('ref_goods', 'ref_goods.id = booking_goods.id_goods')
            ->join('ref_units', 'ref_units.id = booking_goods.id_unit')
            ->where('bookings.id', $bookingId)
            ->get()
            ->result_array();
    }

    /**
     * Export data to excel.
     *
     * @param $booking
     * @throws \PhpOffice\PhpSpreadsheet\Exception
     * @throws \PhpOffice\PhpSpreadsheet\Writer\Exception
     */
    public function exportBooking($booking)
    {
        $data = $this->getBookingGoods($booking['id']);

        $spreadsheet = new Spreadsheet();
        $spreadsheet->getProperties()
            ->setCreator($this->config->item('app_name'))
            ->setLastModifiedBy($this->config->item('app_name'))
            ->setTitle('Booking')
            ->setSubject('Booking Goods')
            ->setDescription('Data export generated by: ' . $this->config->item('app_name'));
        $sheet = $spreadsheet->getActiveSheet();

        // add customer title
        $sheet->setCellValue('A1', 'Booking No:');
        $sheet->setCellValue('C1', "{$booking['no_booking']} ({$booking['no_reference']})");
        $sheet->mergeCells('A1:B1');
        $sheet->mergeCells('C1:F1');

        $sheet->setCellValue('A2', 'Customer:');
        $sheet->setCellValue('C2', $booking['customer_name']);
        $sheet->mergeCells('A2:B2');
        $sheet->mergeCells('C2:F2');

        $sheet
            ->getStyle('A1:B2')
            ->getFont()
            ->setBold(true);

        // add table header row 1
        $sheet->setCellValue('A4', 'No');
        $sheet->setCellValue('B4', 'No Reference');
        $sheet->setCellValue('C4', 'No Container');
        $sheet->setCellValue('D4', 'Type');
        $sheet->setCellValue('E4', 'Size');
        $sheet->setCellValue('F4', 'Seal');
        $sheet->setCellValue('G4', 'Is Empty');
        $sheet->setCellValue('H4', 'Is Hold');
        $sheet->setCellValue('I4', 'Status');
        $sheet->setCellValue('J4', 'Danger');
        $sheet->setCellValue('K4', 'Description');
        $sheet->setCellValue('L4', 'Goods');
        $sheet->setCellValue('M4', 'Whey / Goods No.');
        $sheet->setCellValue('N4', 'Quantity');
        $sheet->setCellValue('O4', 'Unit');
        $sheet->setCellValue('P4', 'Unit Weight');
        $sheet->setCellValue('Q4', 'Total Weight');
        $sheet->setCellValue('R4', 'Unit Gross Weight');
        $sheet->setCellValue('S4', 'Total Gross Weight');
        $sheet->setCellValue('T4', 'Unit Length');
        $sheet->setCellValue('U4', 'Unit Width');
        $sheet->setCellValue('V4', 'Unit Height');
        $sheet->setCellValue('W4', 'Unit Volume');
        $sheet->setCellValue('X4', 'Total Volume');
        $sheet->setCellValue('Y4', 'Is Hold');
        $sheet->setCellValue('Z4', 'Status');
        $sheet->setCellValue('AA4', 'Danger');
        $sheet->setCellValue('AB4', 'Description');

        // styling header fill color and alignment
        $sheet
            ->getStyle('A4:AB4')
            ->applyFromArray([
                    'fill' => [
                        'fillType' => Fill::FILL_SOLID,
                        'color' => ['rgb' => '000000']
                    ],
                    'font' => [
                        'bold' => true,
                        'color' => ['rgb' => 'FFFFFF']
                    ]
                ]
            );
        $sheet
            ->getStyle('A4:AB4')
            ->getAlignment()
            ->setVertical(Alignment::VERTICAL_CENTER);

        // add transaction rows
        $row = 5;
        foreach ($data as $index => $item) {
            $sheet->setCellValue('A' . $row, $index + 1);
            $sheet->setCellValue('B' . $row, $item['no_reference']);
            $sheet->setCellValue('C' . $row, $item['no_container']);
            $sheet->setCellValue('D' . $row, $item['container_type']);
            $sheet->setCellValue('E' . $row, $item['container_size']);
            $sheet->setCellValue('F' . $row, $item['seal']);
            $sheet->setCellValue('G' . $row, $item['is_empty']);
            $sheet->setCellValue('H' . $row, $item['container_is_hold']);
            $sheet->setCellValue('I' . $row, $item['container_status']);
            $sheet->setCellValue('J' . $row, $item['container_status_danger']);
            $sheet->setCellValue('K' . $row, $item['container_description']);
            $sheet->setCellValue('L' . $row, $item['goods_name']);
            $sheet->setCellValue('M' . $row, if_empty($item['whey_number'], $item['no_goods']));
            $sheet->setCellValue('N' . $row, $item['quantity']);
            $sheet->setCellValue('O' . $row, $item['unit']);
            $sheet->setCellValue('P' . $row, $item['unit_weight']);
            $sheet->setCellValue('Q' . $row, $item['total_weight']);
            $sheet->setCellValue('R' . $row, $item['unit_gross_weight']);
            $sheet->setCellValue('S' . $row, $item['unit_gross_weight']);
            $sheet->setCellValue('T' . $row, $item['unit_length']);
            $sheet->setCellValue('U' . $row, $item['unit_width']);
            $sheet->setCellValue('V' . $row, $item['unit_height']);
            $sheet->setCellValue('W' . $row, $item['unit_volume']);
            $sheet->setCellValue('X' . $row, $item['total_volume']);
            $sheet->setCellValue('Y' . $row, $item['goods_is_hold']);
            $sheet->setCellValue('Z' . $row, $item['goods_status']);
            $sheet->setCellValue('AA' . $row, $item['goods_status_danger']);
            $sheet->setCellValue('AB' . $row, $item['goods_description']);
            $row++;
        }

        // apply border for data grid
        $sheet
            ->getStyle("A5:AB" . ($row - 1))
            ->applyFromArray([
                    'borders' => array(
                        'allBorders' => array(
                            'borderStyle' => Border::BORDER_THIN,
                        ),
                    ),
                ]
            );

        // set auto column width
        $columnIterator = $sheet->getColumnIterator();
        foreach ($columnIterator as $column) {
            $sheet->getColumnDimension($column->getColumnIndex())->setAutoSize(true);
        }

        // send download response
        $writer = new Xlsx($spreadsheet);
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="Booking-' . url_title($booking['no_booking']) . '.xlsx"');
        $writer->save('php://output');
    }
}
