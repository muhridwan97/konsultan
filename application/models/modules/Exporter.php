<?php

use Box\Spout\Common\Entity\Style\Color;
use Box\Spout\Common\Exception\IOException;
use Box\Spout\Writer\Common\Creator\Style\StyleBuilder;
use Box\Spout\Writer\Common\Creator\WriterEntityFactory;
use Box\Spout\Writer\Exception\InvalidSheetNameException;
use Box\Spout\Writer\Exception\WriterAlreadyOpenedException;
use Box\Spout\Writer\Exception\WriterNotOpenedException;
use Dompdf\Dompdf;
use PhpOffice\PhpSpreadsheet\IOFactory;
use PhpOffice\PhpSpreadsheet\Reader\Html;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Style\NumberFormat;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;

defined('BASEPATH') OR exit('No direct script access allowed');

class Exporter extends CI_Model
{
    const EXCEL2003 = 'Xls';
    const EXCEL = 'Xlsx';
    const ODS = 'Ods';
    const HTML = 'Html';
    const PDF = 'Dompdf';

    /**
     * Export excel from HTML.
     *
     * @param $title
     * @param $html
     * @param string $exportType
     * @param bool $download
     * @param null $storeTo
     * @return null
     * @throws \PhpOffice\PhpSpreadsheet\Exception
     * @throws \PhpOffice\PhpSpreadsheet\Reader\Exception
     * @throws \PhpOffice\PhpSpreadsheet\Writer\Exception
     */
    public function exportFrom($title, $html, $exportType = self::EXCEL, $download = true, $storeTo = null)
    {
        $tempHtml = './uploads/temp/' . uniqid() . '.html';
        file_put_contents($tempHtml, $html);

        $reader = new Html();
        $spreadsheet = $reader->load($tempHtml);
        $spreadsheet->getProperties()
            ->setCreator($this->config->item('app_name'))
            ->setLastModifiedBy($this->config->item('app_name'))
            ->setTitle($title)
            ->setSubject('Data export: ' . $title)
            ->setDescription('Data export generated by: ' . $this->config->item('app_name'));

        $spreadsheet->getSheet(0)->getPageMargins()
            ->setTop(0.2)
            ->setRight(0.2)
            ->setRight(0.2)
            ->setLeft(0.2);

        $writer = IOFactory::createWriter($spreadsheet, $exportType);

        $ext = strtolower($exportType);
        if ($exportType == self::PDF) {
            $ext = 'pdf';
        } else {
            $columnIterator = $spreadsheet->getActiveSheet()->getColumnIterator();
            foreach ($columnIterator as $column) {
                $spreadsheet->getActiveSheet()
                    ->getColumnDimension($column->getColumnIndex())
                    ->setAutoSize(true);

                /*
                $spreadsheet->getActiveSheet()
                    ->getStyle($column->getColumnIndex() . '1')
                    ->applyFromArray([
                            'fill' => [
                                'fillType' => Fill::FILL_SOLID,
                                'color' => ['rgb' => '000000']
                            ],
                            'font' => [
                                'bold' => true,
                                'color' => ['rgb' => 'FFFFFF']
                            ]
                        ]
                    );
                */
            }
        }

        if ($download) {
            // if ($exportType == self::EXCEL || $exportType == self::EXCEL2003) {
            //    header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            // } else if ($exportType == self::PDF) {
            //    header("Content-type:application/pdf");
            // } else if ($exportType == self::ODS) {
            //     header('Content-Type: application/vnd.oasis.opendocument.spreadsheet');
            // }
            // set Content-Disposition: attachment : automatic download
            // header('Content-Disposition: inline; filename="' . $title . '.' . $ext . '"');
            // $writer->save("php://output");

            $this->load->helper('download');
            $storeTo = './uploads/temp/' . $title . '-' . uniqid() . '.' . $ext;
            $writer->save($storeTo);
            @unlink($tempHtml);
            force_download($storeTo, null, true);
        } else {
            if (empty($storeTo)) {
                $storeTo = './uploads/temp/' . $title . '-' . uniqid() . '.' . $ext;
            }
            $writer->save($storeTo);
            return $storeTo;
        }
    }

    /**
     * Export data from array.
     *
     * @param $title
     * @param $data
     * @param bool $download
     * @param null $storeTo
     * @return null|string
     */
    public function exportFromArray($title, $data, $download = true, $storeTo = null)
    {
        foreach ($data as $index => &$datum) {
            $datum = array_merge(['no' => $index + 1], $datum);
            foreach ($datum as $key => $field) {
                if ($key == 'id' || $key == 'is_void' || $key == 'is_deleted' || $key == 'deleted_at' || $key == 'password' || $key == 'token' || preg_match('/^id_/', $key) || preg_match('/_by$/', $key)) {
                    unset($datum[$key]);
                }
            }
        }

        $spreadsheet = new Spreadsheet();
        $spreadsheet->getProperties()
            ->setCreator($this->config->item('app_name'))
            ->setLastModifiedBy($this->config->item('app_name'))
            ->setTitle($title)
            ->setSubject('Data export: ' . $title)
            ->setDescription('Data export generated by: ' . $this->config->item('app_name'));

        $excelWriter = new Xlsx($spreadsheet);

        try {
            $spreadsheet->setActiveSheetIndex(0);
            $activeSheet = $spreadsheet->getActiveSheet();

            $activeSheet->setCellValue('A1', $title)
                ->getStyle('A1')
                ->getFont()
                ->setBold(true);

            $header = [];
            if (!empty($data)) {
                $header = array_keys($data[0]);
                $header = array_map(function ($title) {
                    return strtoupper(str_replace(['_', '-'], ' ', $title));
                }, $header);
            }

            // force number to text
            if(!empty($data)) {
                $activeSheet
                    ->getStyleByColumnAndRow(1, 1, count($header), count($data))
                    ->getNumberFormat()
                    ->setFormatCode(NumberFormat::FORMAT_TEXT)
                    ->setFormatCode('0');
            }

            $activeSheet->fromArray($header, null, 'A1');
            $activeSheet->fromArray($data, null, 'A2');

            $columnIterator = $spreadsheet->getActiveSheet()->getColumnIterator();
            foreach ($columnIterator as $column) {
                $spreadsheet->getActiveSheet()
                    ->getColumnDimension($column->getColumnIndex())
                    ->setAutoSize(true);

                $spreadsheet->getActiveSheet()
                    ->getStyle($column->getColumnIndex() . '1')
                    ->applyFromArray([
                            'fill' => [
                                'fillType' => Fill::FILL_SOLID,
                                'color' => ['rgb' => '000000']
                            ],
                            'font' => [
                                'bold' => true,
                                'color' => ['rgb' => 'FFFFFF']
                            ]
                        ]
                    );
            }

            if (!empty($data)) {
                $activeSheet->setAutoFilterByColumnAndRow(1, 1, count($header), 1);
            }

            if ($download) {
                $this->load->helper('download');
                $storeTo = './uploads/temp/' . $title . '-' . uniqid() . '.xlsx';
                $excelWriter->save($storeTo);
                force_download($storeTo, null, true);
            } else {
                if (empty($storeTo)) {
                    $storeTo = './uploads/temp/' . $title . '-' . uniqid() . '.xlsx';
                }
                $excelWriter->save($storeTo);
                return $storeTo;
            }

        } catch (\PhpOffice\PhpSpreadsheet\Exception $e) {
            return $e->getMessage();
        }

        return false;
    }

    /**
     * Exporter excel with large resource array.
     *
     * @param $title
     * @param $data
     * @param bool $download
     * @param null $storeTo
     * @return string|null
     */
    public function exportLargeResourceFromArray($title, $data, $download = true, $storeTo = null)
    {
        foreach ($data as $index => &$datum) {
            $datum = array_merge(['no' => $index + 1], $datum);
            foreach ($datum as $key => $field) {
                if ($key == 'id' || $key == 'is_void'  || $key == 'is_deleted' || $key == 'deleted_at' || $key == 'password' || $key == 'token' || preg_match('/^id_/', $key) || preg_match('/_by$/', $key)) {
                    unset($datum[$key]);
                }
            }
        }
        try {
            if (empty($storeTo)) {
                $storeTo = './uploads/temp/' . $title . '-' . date('YmdHis') . '.xlsx';
            }
            $writer = WriterEntityFactory::createXLSXWriter();
            $writer->setTempFolder(FCPATH . 'uploads' . DIRECTORY_SEPARATOR . 'temp');

            if ($download) {
                $writer->openToBrowser($storeTo);
            } else {
                $writer->openToFile($storeTo);
            }

            $header = [];
            if (!empty($data)) {
                $header = array_keys($data[0]);
                $header = array_map(function ($title) {
                    return strtoupper(str_replace(['_', '-'], ' ', $title));
                }, $header);
            }
            $headerStyle = (new StyleBuilder())
                ->setFontBold()
                ->setFontSize(12)
                ->setFontColor(Color::WHITE)
                ->setShouldWrapText(false)
                ->setBackgroundColor(Color::BLACK)
                ->build();
            $rowFromValues = WriterEntityFactory::createRowFromArray($header, $headerStyle);
            $writer->addRow($rowFromValues);

            foreach ($data as $row) {
                $rowFromValues = WriterEntityFactory::createRowFromArray($row);
                $writer->addRow($rowFromValues);
            }

            $sheet = $writer->getCurrentSheet();
            $sheet->setName($title);
            $writer->close();

            if (!$download) {
                return $storeTo;
            }
        } catch (IOException $e) {
            show_error($e->getMessage());
        } catch (WriterNotOpenedException $e) {
            show_error($e->getMessage());
        } catch (WriterAlreadyOpenedException $e) {
            show_error($e->getMessage());
        } catch (InvalidSheetNameException $e) {
            show_error($e->getMessage());
        }
    }

    /**
     * Export to csv.
     *
     * @param $resource
     * @param string $filename
     * @param bool $download
     * @param null $storeTo
     */
    public function exportToCsv($resource, $filename = 'data', $download = true, $storeTo = null)
    {
        if ($download) {
            header("Content-type: application/csv");
            header("Content-Disposition: attachment; filename={$filename}.csv");
            if (is_dir($storeTo)) {
                $storeTo = $storeTo . "/{$filename}.csv";
            }
            $storeTo = if_empty($storeTo, 'php://output');
            $fp = fopen($storeTo, 'a');
        } else {
            $storeTo = if_empty($storeTo, "./uploads/temp/{$filename}.csv");
            $fp = fopen($storeTo, 'a');
        }

        if ($resource instanceof CI_DB_query_builder) {
            $resource = $resource->get();
        }

        if ($resource instanceof CI_DB_mysqli_result) {
            $nextRecord = $resource->unbuffered_row('array');
        } else {
            $nextRecord = $resource[0] ?? [];
        }

        $header = array_keys($nextRecord);
        if (!empty($header)) {
            fputcsv($fp, $header);
        }

        if ($resource instanceof CI_DB_mysqli_result) {
            do {
                fputcsv($fp, $nextRecord);
            } while ($nextRecord = $resource->unbuffered_row('array'));
        } else {
            foreach ($resource as $nextRecord) {
                fputcsv($fp, $nextRecord);
            }
        }

        fclose($fp);
    }

    /**
     * Export pdf from html.
     *
     * @param $title
     * @param $html
     * @param array $options
     * @return null|string
     */
    public function exportToPdf($title, $html, $options = [])
    {
        $pdf = new \Dompdf\Dompdf(['isHtml5ParserEnabled' => true, 'isPhpEnabled' => true]);

        if(empty($html)) {
            $options['data']['pdf'] = $pdf;
            $pdf->loadHtml($this->load->view($options['view'], $options['data'], true));
        } else {
            $pdf->loadHtml($html);
        }

        if (key_exists('paper', $options) && !empty($options['paper'])) {
            if (key_exists('orientation', $options) && !empty($options['orientation'])) {
                $pdf->setPaper($options['paper'], $options['orientation']);
            } else {
                $pdf->setPaper($options['paper'], 'portrait');
            }
        } else {
            $pdf->setPaper('A4', 'portrait');
        }

        $buffer = get_if_exist($options, 'buffer', false);

        $pdf->render();

        if ($buffer) {
            return $pdf->output();
        }

        $pdf->stream($title . ".pdf", ["Attachment" => false]);
    }
}
